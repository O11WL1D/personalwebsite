slice(1:5)
ci <- ci %>%
mutate(capture_mu = ifelse(lower < params$mu & upper > params$mu, "yes", "no"))
ci_data <- gather(ci, type, bound, lower:upper)
# We briefly mentioned using ggplot to make plots in the class, but didn't ask you to do anything. Here is an example to
# show the advantage of ggplot. It would take more code to only use R basic graphics (that we have used up until now, e.g.,
# plot()) to finish a similar plot.
ggplot(data = ci_data, aes(x = bound, y = replicate,
group = replicate, color = capture_mu)) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
# type your code here
sum(ci$capture_mu)
set.seed(9102015)               # do not change the seed for this lab
library(dplyr)
library(tidyr)
library(infer)
library(ggplot2)
ames<-read.csv('./ames.csv')
n <- 60
samp <- sample_n(ames, n)
# type your code here:
samp
hist(samp$area,breaks=20)
samp %>%
summarize(median=median(area), mean=mean(area))
t_star_95 <- qt(0.975, 59)
t_star_95
samp %>%
summarise(lower = mean(area) - t_star_95 * (sd(area) / sqrt(n)),
upper = mean(area) + t_star_95 * (sd(area) / sqrt(n)))
params <- ames %>%
summarise(mu = mean(area))
ci <- ames %>%
rep_sample_n(size = n, reps = 50, replace = TRUE) %>%
summarise(lower = mean(area) - t_star_95 * (sd(area) / sqrt(n)),
upper = mean(area) + t_star_95 * (sd(area) / sqrt(n)))
ci %>%
slice(1:5)
ci <- ci %>%
mutate(capture_mu = ifelse(lower < params$mu & upper > params$mu, "yes", "no"))
ci_data <- gather(ci, type, bound, lower:upper)
# We briefly mentioned using ggplot to make plots in the class, but didn't ask you to do anything. Here is an example to
# show the advantage of ggplot. It would take more code to only use R basic graphics (that we have used up until now, e.g.,
# plot()) to finish a similar plot.
ggplot(data = ci_data, aes(x = bound, y = replicate,
group = replicate, color = capture_mu)) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
# type your code here
ci <- ci %>%
mutate(capture_mu1 = ifelse(lower < params$mu & upper > params$mu, 1, 0))
sum(
ci$capture_mu1
)
# type your code here
# type your code here
nc<-read.csv('./nc.csv')
# show the structure of the data frame
str(nc)
# display the first few lines of the data frame
head(nc)
# return the dimension of the data frame
dim(nc)
# return summaries of each variable
summary(nc)
summary(nc$gained)
boxplot(weight ~ habit, data=nc)
nc %>%
group_by(habit) %>%
summarise(mean_weight = mean(weight))
smoker <- nc %>%
filter(nc$habit=='smoker')
nonsmoker <- nc %>%
filter(nc$habit=='nonsmoker')
t.test(smoker$weight, nonsmoker$weight)
## 0.95 is the default, so this would return the same answer:
# t.test(smoker$weight, nonsmoker$weight, conf.level=0.95)
t.test(weight ~ habit, data=nc)
t.test(smoker$weight, nonsmoker$weight, alternative='less')
# Please type your code here:
set.seed(9102015)               # do not change the seed for this lab
library(dplyr)
library(tidyr)
library(infer)
library(ggplot2)
ames<-read.csv('./ames.csv')
n <- 60
samp <- sample_n(ames, n)
# type your code here:
samp
hist(samp$area,breaks=20)
samp %>%
summarize(median=median(area), mean=mean(area))
t_star_95 <- qt(0.975, 59)
t_star_95
samp %>%
summarise(lower = mean(area) - t_star_95 * (sd(area) / sqrt(n)),
upper = mean(area) + t_star_95 * (sd(area) / sqrt(n)))
params <- ames %>%
summarise(mu = mean(area))
ci <- ames %>%
rep_sample_n(size = n, reps = 50, replace = TRUE) %>%
summarise(lower = mean(area) - t_star_95 * (sd(area) / sqrt(n)),
upper = mean(area) + t_star_95 * (sd(area) / sqrt(n)))
ci %>%
slice(1:5)
ci <- ci %>%
mutate(capture_mu = ifelse(lower < params$mu & upper > params$mu, "yes", "no"))
ci_data <- gather(ci, type, bound, lower:upper)
# We briefly mentioned using ggplot to make plots in the class, but didn't ask you to do anything. Here is an example to
# show the advantage of ggplot. It would take more code to only use R basic graphics (that we have used up until now, e.g.,
# plot()) to finish a similar plot.
ggplot(data = ci_data, aes(x = bound, y = replicate,
group = replicate, color = capture_mu)) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
# type your code here
ci <- ci %>%
mutate(capture_mu1 = ifelse(lower < params$mu & upper > params$mu, 1, 0))
nrow(ci$capture_mu1)/sum(
ci$capture_mu1
)
# type your code here
# type your code here
nc<-read.csv('./nc.csv')
# show the structure of the data frame
str(nc)
# display the first few lines of the data frame
head(nc)
# return the dimension of the data frame
dim(nc)
# return summaries of each variable
summary(nc)
summary(nc$gained)
boxplot(weight ~ habit, data=nc)
nc %>%
group_by(habit) %>%
summarise(mean_weight = mean(weight))
smoker <- nc %>%
filter(nc$habit=='smoker')
nonsmoker <- nc %>%
filter(nc$habit=='nonsmoker')
t.test(smoker$weight, nonsmoker$weight)
## 0.95 is the default, so this would return the same answer:
# t.test(smoker$weight, nonsmoker$weight, conf.level=0.95)
t.test(weight ~ habit, data=nc)
t.test(smoker$weight, nonsmoker$weight, alternative='less')
# Please type your code here:
set.seed(9102015)               # do not change the seed for this lab
library(dplyr)
library(tidyr)
library(infer)
library(ggplot2)
ames<-read.csv('./ames.csv')
n <- 60
samp <- sample_n(ames, n)
# type your code here:
samp
hist(samp$area,breaks=20)
samp %>%
summarize(median=median(area), mean=mean(area))
t_star_95 <- qt(0.975, 59)
t_star_95
samp %>%
summarise(lower = mean(area) - t_star_95 * (sd(area) / sqrt(n)),
upper = mean(area) + t_star_95 * (sd(area) / sqrt(n)))
params <- ames %>%
summarise(mu = mean(area))
ci <- ames %>%
rep_sample_n(size = n, reps = 50, replace = TRUE) %>%
summarise(lower = mean(area) - t_star_95 * (sd(area) / sqrt(n)),
upper = mean(area) + t_star_95 * (sd(area) / sqrt(n)))
ci %>%
slice(1:5)
ci <- ci %>%
mutate(capture_mu = ifelse(lower < params$mu & upper > params$mu, "yes", "no"))
ci_data <- gather(ci, type, bound, lower:upper)
# We briefly mentioned using ggplot to make plots in the class, but didn't ask you to do anything. Here is an example to
# show the advantage of ggplot. It would take more code to only use R basic graphics (that we have used up until now, e.g.,
# plot()) to finish a similar plot.
ggplot(data = ci_data, aes(x = bound, y = replicate,
group = replicate, color = capture_mu)) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
# type your code here
ci <- ci %>%
mutate(capture_mu1 = ifelse(lower < params$mu & upper > params$mu, 1, 0))
nrow(ci$capture_mu1)
sum(
ci$capture_mu1
)
# type your code here
# type your code here
nc<-read.csv('./nc.csv')
# show the structure of the data frame
str(nc)
# display the first few lines of the data frame
head(nc)
# return the dimension of the data frame
dim(nc)
# return summaries of each variable
summary(nc)
summary(nc$gained)
boxplot(weight ~ habit, data=nc)
nc %>%
group_by(habit) %>%
summarise(mean_weight = mean(weight))
smoker <- nc %>%
filter(nc$habit=='smoker')
nonsmoker <- nc %>%
filter(nc$habit=='nonsmoker')
t.test(smoker$weight, nonsmoker$weight)
## 0.95 is the default, so this would return the same answer:
# t.test(smoker$weight, nonsmoker$weight, conf.level=0.95)
t.test(weight ~ habit, data=nc)
t.test(smoker$weight, nonsmoker$weight, alternative='less')
# Please type your code here:
set.seed(9102015)               # do not change the seed for this lab
library(dplyr)
library(tidyr)
library(infer)
library(ggplot2)
ames<-read.csv('./ames.csv')
n <- 60
samp <- sample_n(ames, n)
# type your code here:
samp
hist(samp$area,breaks=20)
samp %>%
summarize(median=median(area), mean=mean(area))
t_star_95 <- qt(0.975, 59)
t_star_95
samp %>%
summarise(lower = mean(area) - t_star_95 * (sd(area) / sqrt(n)),
upper = mean(area) + t_star_95 * (sd(area) / sqrt(n)))
params <- ames %>%
summarise(mu = mean(area))
ci <- ames %>%
rep_sample_n(size = n, reps = 50, replace = TRUE) %>%
summarise(lower = mean(area) - t_star_95 * (sd(area) / sqrt(n)),
upper = mean(area) + t_star_95 * (sd(area) / sqrt(n)))
ci %>%
slice(1:5)
ci <- ci %>%
mutate(capture_mu = ifelse(lower < params$mu & upper > params$mu, "yes", "no"))
ci_data <- gather(ci, type, bound, lower:upper)
# We briefly mentioned using ggplot to make plots in the class, but didn't ask you to do anything. Here is an example to
# show the advantage of ggplot. It would take more code to only use R basic graphics (that we have used up until now, e.g.,
# plot()) to finish a similar plot.
ggplot(data = ci_data, aes(x = bound, y = replicate,
group = replicate, color = capture_mu)) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
# type your code here
ci <- ci %>%
mutate(capture_mu1 = ifelse(lower < params$mu & upper > params$mu, 1, 0))
length(ci$capture_mu1)
sum(
ci$capture_mu1
)
# type your code here
# type your code here
nc<-read.csv('./nc.csv')
# show the structure of the data frame
str(nc)
# display the first few lines of the data frame
head(nc)
# return the dimension of the data frame
dim(nc)
# return summaries of each variable
summary(nc)
summary(nc$gained)
boxplot(weight ~ habit, data=nc)
nc %>%
group_by(habit) %>%
summarise(mean_weight = mean(weight))
smoker <- nc %>%
filter(nc$habit=='smoker')
nonsmoker <- nc %>%
filter(nc$habit=='nonsmoker')
t.test(smoker$weight, nonsmoker$weight)
## 0.95 is the default, so this would return the same answer:
# t.test(smoker$weight, nonsmoker$weight, conf.level=0.95)
t.test(weight ~ habit, data=nc)
t.test(smoker$weight, nonsmoker$weight, alternative='less')
# Please type your code here:
set.seed(9102015)               # do not change the seed for this lab
library(dplyr)
library(tidyr)
library(infer)
library(ggplot2)
ames<-read.csv('./ames.csv')
n <- 60
samp <- sample_n(ames, n)
# type your code here:
samp
hist(samp$area,breaks=20)
samp %>%
summarize(median=median(area), mean=mean(area))
t_star_95 <- qt(0.975, 59)
t_star_95
samp %>%
summarise(lower = mean(area) - t_star_95 * (sd(area) / sqrt(n)),
upper = mean(area) + t_star_95 * (sd(area) / sqrt(n)))
params <- ames %>%
summarise(mu = mean(area))
ci <- ames %>%
rep_sample_n(size = n, reps = 50, replace = TRUE) %>%
summarise(lower = mean(area) - t_star_95 * (sd(area) / sqrt(n)),
upper = mean(area) + t_star_95 * (sd(area) / sqrt(n)))
ci %>%
slice(1:5)
ci <- ci %>%
mutate(capture_mu = ifelse(lower < params$mu & upper > params$mu, "yes", "no"))
ci_data <- gather(ci, type, bound, lower:upper)
# We briefly mentioned using ggplot to make plots in the class, but didn't ask you to do anything. Here is an example to
# show the advantage of ggplot. It would take more code to only use R basic graphics (that we have used up until now, e.g.,
# plot()) to finish a similar plot.
ggplot(data = ci_data, aes(x = bound, y = replicate,
group = replicate, color = capture_mu)) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
# type your code here
ci <- ci %>%
mutate(capture_mu1 = ifelse(lower < params$mu & upper > params$mu, 1, 0))
length(ci$capture_mu1)
sum(
ci$capture_mu1
)
length(ci$capture_mu1)/sum(
ci$capture_mu1
)
# type your code here
# type your code here
nc<-read.csv('./nc.csv')
# show the structure of the data frame
str(nc)
# display the first few lines of the data frame
head(nc)
# return the dimension of the data frame
dim(nc)
# return summaries of each variable
summary(nc)
summary(nc$gained)
boxplot(weight ~ habit, data=nc)
nc %>%
group_by(habit) %>%
summarise(mean_weight = mean(weight))
smoker <- nc %>%
filter(nc$habit=='smoker')
nonsmoker <- nc %>%
filter(nc$habit=='nonsmoker')
t.test(smoker$weight, nonsmoker$weight)
## 0.95 is the default, so this would return the same answer:
# t.test(smoker$weight, nonsmoker$weight, conf.level=0.95)
t.test(weight ~ habit, data=nc)
t.test(smoker$weight, nonsmoker$weight, alternative='less')
# Please type your code here:
set.seed(9102015)               # do not change the seed for this lab
library(dplyr)
library(tidyr)
library(infer)
library(ggplot2)
ames<-read.csv('./ames.csv')
n <- 60
samp <- sample_n(ames, n)
# type your code here:
samp
hist(samp$area,breaks=20)
samp %>%
summarize(median=median(area), mean=mean(area))
t_star_95 <- qt(0.975, 59)
t_star_95
samp %>%
summarise(lower = mean(area) - t_star_95 * (sd(area) / sqrt(n)),
upper = mean(area) + t_star_95 * (sd(area) / sqrt(n)))
params <- ames %>%
summarise(mu = mean(area))
ci <- ames %>%
rep_sample_n(size = n, reps = 50, replace = TRUE) %>%
summarise(lower = mean(area) - t_star_95 * (sd(area) / sqrt(n)),
upper = mean(area) + t_star_95 * (sd(area) / sqrt(n)))
ci %>%
slice(1:5)
ci <- ci %>%
mutate(capture_mu = ifelse(lower < params$mu & upper > params$mu, "yes", "no"))
ci_data <- gather(ci, type, bound, lower:upper)
# We briefly mentioned using ggplot to make plots in the class, but didn't ask you to do anything. Here is an example to
# show the advantage of ggplot. It would take more code to only use R basic graphics (that we have used up until now, e.g.,
# plot()) to finish a similar plot.
ggplot(data = ci_data, aes(x = bound, y = replicate,
group = replicate, color = capture_mu)) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
# type your code here
ci <- ci %>%
mutate(capture_mu1 = ifelse(lower < params$mu & upper > params$mu, 1, 0))
length(ci$capture_mu1)
sum(
ci$capture_mu1
)
sum(
ci$capture_mu1
)/length(ci$capture_mu1)
# type your code here
# type your code here
nc<-read.csv('./nc.csv')
# show the structure of the data frame
str(nc)
# display the first few lines of the data frame
head(nc)
# return the dimension of the data frame
dim(nc)
# return summaries of each variable
summary(nc)
summary(nc$gained)
boxplot(weight ~ habit, data=nc)
nc %>%
group_by(habit) %>%
summarise(mean_weight = mean(weight))
smoker <- nc %>%
filter(nc$habit=='smoker')
nonsmoker <- nc %>%
filter(nc$habit=='nonsmoker')
t.test(smoker$weight, nonsmoker$weight)
## 0.95 is the default, so this would return the same answer:
# t.test(smoker$weight, nonsmoker$weight, conf.level=0.95)
t.test(weight ~ habit, data=nc)
t.test(smoker$weight, nonsmoker$weight, alternative='less')
# Please type your code here:
set.seed(9102015)               # do not change the seed for this lab
library(dplyr)
library(tidyr)
library(infer)
library(ggplot2)
ames<-read.csv('./ames.csv')
n <- 60
samp <- sample_n(ames, n)
# type your code here:
samp
hist(samp$area,breaks=20)
samp %>%
summarize(median=median(area), mean=mean(area))
t_star_95 <- qt(0.975, 59)
t_star_95
samp %>%
summarise(lower = mean(area) - t_star_95 * (sd(area) / sqrt(n)),
upper = mean(area) + t_star_95 * (sd(area) / sqrt(n)))
params <- ames %>%
summarise(mu = mean(area))
ci <- ames %>%
rep_sample_n(size = n, reps = 50, replace = TRUE) %>%
summarise(lower = mean(area) - t_star_95 * (sd(area) / sqrt(n)),
upper = mean(area) + t_star_95 * (sd(area) / sqrt(n)))
ci %>%
slice(1:5)
ci <- ci %>%
mutate(capture_mu = ifelse(lower < params$mu & upper > params$mu, "yes", "no"))
ci_data <- gather(ci, type, bound, lower:upper)
# We briefly mentioned using ggplot to make plots in the class, but didn't ask you to do anything. Here is an example to
# show the advantage of ggplot. It would take more code to only use R basic graphics (that we have used up until now, e.g.,
# plot()) to finish a similar plot.
ggplot(data = ci_data, aes(x = bound, y = replicate,
group = replicate, color = capture_mu)) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
# type your code here
ci <- ci %>%
mutate(capture_mu1 = ifelse(lower < params$mu & upper > params$mu, 1, 0))
length(ci$capture_mu1)
sum(
ci$capture_mu1
)
sum(
ci$capture_mu1
)/length(ci$capture_mu1)
# type your code here
qt(0.99,59)
# type your code here
nc<-read.csv('./nc.csv')
# show the structure of the data frame
str(nc)
# display the first few lines of the data frame
head(nc)
# return the dimension of the data frame
dim(nc)
# return summaries of each variable
summary(nc)
summary(nc$gained)
boxplot(weight ~ habit, data=nc)
nc %>%
group_by(habit) %>%
summarise(mean_weight = mean(weight))
smoker <- nc %>%
filter(nc$habit=='smoker')
nonsmoker <- nc %>%
filter(nc$habit=='nonsmoker')
t.test(smoker$weight, nonsmoker$weight)
## 0.95 is the default, so this would return the same answer:
# t.test(smoker$weight, nonsmoker$weight, conf.level=0.95)
t.test(weight ~ habit, data=nc)
t.test(smoker$weight, nonsmoker$weight, alternative='less')
# Please type your code here:
